name: Deploy Image Processor

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd infra && npm ci

      - name: Build application
        run: |
          npm run build
          cd infra && npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 -t image-processor .

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: n11837845-image-processor
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build --platform linux/amd64 --push \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

      - name: Deploy CDK stack
        run: |
          cd infra
          cdk bootstrap
          cdk deploy --require-approval never

      - name: Update EC2 instance
        run: |
          # Get EC2 instance ID from CDK output
          INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name ImageProcessorStack --query 'Stacks[0].Outputs[?OutputKey==`EC2InstanceId`].OutputValue' --output text)

          # Send command to EC2 to pull new image and restart
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "sudo docker pull 901444280953.dkr.ecr.ap-southeast-2.amazonaws.com/n11837845-image-processor:latest",
              "sudo docker stop image-processor || true",
              "sudo docker rm image-processor || true",
              "sudo docker run -d --name image-processor -p 3000:3000 --restart unless-stopped -e NODE_ENV=production -e DB_HOST=database-1-instance-1.ce2haupt2cta.ap-southeast-2.rds.amazonaws.com -e DB_USER=s302 -e DB_PASSWORD=FOseoXExzp8Q -e DB_NAME=cohort_2025 -e DB_PORT=5432 -e DB_SSL=require -e DB_SSL_REJECT_UNAUTHORIZED=false -e AWS_REGION=ap-southeast-2 -e S3_BUCKET_NAME=a2-n11837845-image-processor -e JWT_SECRET=secret-key-n11837845 901444280953.dkr.ecr.ap-southeast-2.amazonaws.com/n11837845-image-processor:latest"
            ]'
